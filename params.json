{
  "name": "Blobtools",
  "tagline": "Visualisation of (draft) genome assemblies",
  "body": "> Once we were blobs in the sea...\r\n\r\n> -Terry Pratchett, A Hat Full of Sky\r\n\r\n# blobtools\r\nApplication for the visualisation of (draft) genome assemblies using TAGC (Taxon-annotated Gc-Coverage) plots [Kumar et al. 2012](http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3843372/pdf/fgene-04-00237.pdf).\r\n\r\n## Requirements\r\n- Python 2.7+\r\n- Matplotlib 1.5\r\n- Docopt\r\n- NCBI Taxonomy (names.dmp and nodes.dmp), <ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz>\r\n- Virtualenv (recommended), see [Tutorial](http://docs.python-guide.org/en/latest/dev/virtualenvs/)\r\n\r\n## Installation\r\n- Recommended\r\n```\r\n# install virtualenv\r\npip install virtualenv\r\n\r\n# clone blobtools into folder\r\ngit clone https://github.com/DRL/blobtools.git\r\n\r\n# create virtual environment for blobtools\r\ncd blobtools/\r\nvirtualenv blob_env\r\n\r\n# activate virtual environment\r\nsource blob_env/bin/activate\r\n\r\n# install matplotlib\r\n(blob_env) $ pip install matplotlib\r\n\r\n# install docopt\r\n(blob_env) $ pip install docopt\r\n\r\n# run\r\n(blob_env) $ ./blobtools -h\r\n```\r\n- Basic\r\n```\r\n# clone blobtools into folder\r\n$ git clone https://github.com/DRL/blobtools.git\r\n\r\n# install matplotlib\r\n$ pip install matplotlib\r\n\r\n# install docopt\r\n$ pip install docopt\r\n\r\n# run\r\n$ ./blobtools -h\r\n```\r\n\r\n## Doc\r\n### blobtools\r\n- main executable\r\n```\r\nusage: blobtools <command> [<args>...] [--help]\r\n\r\ncommands:\r\n  create        create a BlobDB\r\n  view          print BlobDB as a table\r\n  blobplot      plot BlobDB as a blobplot\r\n\r\n  covplot       compare BlobDB cov(s) to additional cov file\r\n  bam2cov       generate cov file from bam file\r\n  sumcov        sum coverage from multiple COV files\r\n\r\n-h --help    show this\r\n```\r\n\r\n### blobtools create\r\n- create a BlobDb JSON file\r\n```\r\nusage: blobtools create     -i FASTA [-y FASTATYPE] [-o OUTFILE] [--title TITLE]\r\n                              [-b BAM...] [-s SAM...] [-a CAS...] [-c COV...]\r\n                              [--nodes <NODES>] [--names <NAMES>] [--db <NODESDB>]\r\n                              [-t TAX...] [-x TAXRULE...]\r\n                              [-h|--help]\r\n\r\n    Options:\r\n        -h --help                   show this\r\n        -i, --infile FASTA          FASTA file of assembly. Headers are split at whitespaces.\r\n        -y, --type FASTATYPE        Assembly program used to create FASTA. If specified,\r\n                                    coverage will be parsed from FASTA header.\r\n                                    (Parsing supported for 'spades', 'soap', 'velvet', 'abyss')\r\n        -t, --taxfile TAX...        Taxonomy file in format (qseqid\\ttaxid\\tbitscore)\r\n                                    (e.g. BLAST output \"--outfmt '6 qseqid staxids bitscore'\")\r\n        -x, --taxrule <TAXRULE>...  Taxrule determines how taxonomy of blobs is computed [default: bestsum]\r\n                                    \"bestsum\"       : sum bitscore across all hits for each taxonomic rank\r\n                                    \"bestsumorder\"  : sum bitscore across all hits for each taxonomic rank.\r\n                                                  - If first <TAX> file supplies hits, bestsum is calculated.\r\n                                                  - If no hit is found, the next <TAX> file is used.\r\n        --nodes <NODES>             NCBI nodes.dmp file. Not required if '--db'\r\n        --names <NAMES>             NCBI names.dmp file. Not required if '--db'\r\n        --db <NODESDB>              NodesDB file [default: data/nodesDB.txt].\r\n        -b, --bam <BAM>...          BAM file(s) (requires samtools in $PATH)\r\n        -s, --sam <SAM>...          SAM file(s)\r\n        -a, --cas <CAS>...          CAS file(s) (requires clc_mapping_info in $PATH)\r\n        -c, --cov <COV>...          TAB separated. (seqID\\tcoverage)\r\n        -o, --out <OUT>             BlobDB output prefix\r\n        --title TITLE               Title of BlobDB [default: output prefix)\r\n```\r\n\r\n### blobtools view\r\n- generate table output from a blobDB file\r\n```\r\nusage: blobtools view    -i <BLOBDB> [-x <TAXRULE>] [--rank <TAXRANK>...] [--hits]\r\n                            [--list <LIST>] [--out <OUT>]\r\n                            [--h|--help]\r\n\r\n    Options:\r\n        --h --help                  show this\r\n        -i, --input <BLOBDB>        BlobDB file (created with \"blobtools create\")\r\n        -o, --out <OUT>             Output file [default: STDOUT]\r\n        -l, --list <LIST>           List of sequence names (comma-separated or file).\r\n                                    If comma-separated, no whitespaces allowed.\r\n        -x, --taxrule <TAXRULE>     Taxrule used for computing taxonomy (supported: \"bestsum\", \"bestsumorder\")\r\n                                    [default: bestsum]\r\n        -r, --rank <TAXRANK>...         Taxonomic rank(s) at which output will be written.\r\n                                    (supported: 'species', 'genus', 'family', 'order',\r\n                                    'phylum', 'superkingdom', 'all') [default: phylum]\r\n        -b, --hits                  Displays taxonomic hits from tax files\r\n```\r\n\r\n### blobtools blobplot\r\n- generate a blobplot from a blobDB file\r\n```\r\nusage: blobtools blobplot  -i BLOBDB [-p INT] [-l INT] [-c] [-n] [-s]\r\n                                [-r RANK] [-x TAXRULE] [--label GROUPS...]\r\n                                [-o PREFIX] [-m] [--sort ORDER] [--hist HIST] [--title]\r\n                                [--colours FILE] [--include FILE] [--exclude FILE]\r\n                                [--format FORMAT] [--noblobs] [--noreads]\r\n                                [--refcov FILE] [--catcolour FILE]\r\n                                [-h|--help]\r\n\r\n    Options:\r\n        -h --help                   show this\r\n        -i, --infile BLOBDB         BlobDB file (created with \"blobtools create\")\r\n        -p, --plotgroups INT        Number of (taxonomic) groups to plot, remaining\r\n                                     groups are placed in 'other' [default: 7]\r\n        -l, --length INT            Minimum sequence length considered for plotting [default: 100]\r\n        -c, --cindex                Colour blobs by 'c index' [default: False]\r\n        -n, --nohit                 Hide sequences without taxonomic annotation [default: False]\r\n        -s, --noscale               Do not scale sequences by length [default: False]\r\n        -o, --out PREFIX            Output prefix\r\n        -m, --multiplot             Multi-plot. Print plot after addition of each (taxonomic) group\r\n                                     [default: False]\r\n        --sort <ORDER>              Sort order for plotting [default: span]\r\n                                     span  : plot with decreasing span\r\n                                     count : plot with decreasing count\r\n        --hist <HIST>               Data for histograms [default: span]\r\n                                     span  : span-weighted histograms\r\n                                     count : count histograms\r\n        --title                     Add title of BlobDB to plot [default: False]\r\n        -r, --rank RANK             Taxonomic rank used for colouring of blobs [default: phylum]\r\n                                     (Supported: species, genus, family, order, phylum, superkingdom)\r\n        -x, --taxrule TAXRULE       Taxrule which has been used for computing taxonomy\r\n                                     (Supported: bestsum, bestsumorder) [default: bestsum]\r\n        --label GROUPS...           Relabel (taxonomic) groups (not 'all' or 'other'),\r\n                                     e.g. \"Bacteria=Actinobacteria,Proteobacteria\"\r\n        --colours COLOURFILE        File containing colours for (taxonomic) groups\r\n        --exclude GROUPS..          Place these (taxonomic) groups in 'other',\r\n                                     e.g. \"Actinobacteria,Proteobacteria\"\r\n        --format FORMAT             Figure format for plot (png, pdf, eps, jpeg,\r\n                                        ps, svg, svgz, tiff) [default: png]\r\n        --noblobs                   Omit blobplot [default: False]\r\n        --noreads                   Omit plot of reads mapping [default: False]\r\n        --refcov FILE               File containing number of \"total\" and \"mapped\" reads\r\n                                     per coverage file. (e.g.: bam0,900,100). If provided, info\r\n                                     will be used in read coverage plot(s).\r\n        --catcolour FILE            Colour plot based on categories from FILE\r\n                                     (format : \"seq     category\").\r\n```\r\n## Additional features\r\n\r\n### blobtools bam2cov\r\n- extract base-coverage for each contig from BAM file\r\n```\r\nusage: blobtools bam2cov         -i FASTA -b BAM [-h|--help]\r\n\r\n    Options:\r\n        -h --help                   show this\r\n        -i, --infile FASTA          FASTA file of assembly. Headers are split at whitespaces.\r\n        -b, --bam <BAM>             BAM file (requires samtools in $PATH)\r\n```\r\n### blobtools covplot\r\n- plots blobDB cov(s) vs additional cov file (only works at superkingdom level at the moment)\r\n```\r\nusage: blobtools covplot  -i BLOBDB -c COV [-p INT] [-l INT] [-n] [-s]\r\n                                [--xlabel XLABEL] [--ylabel YLABEL]\r\n                                [--log] [--xmax FLOAT] [--ymax FLOAT]\r\n                                [-r RANK] [-x TAXRULE] [-o PREFIX] [-m] [--title]\r\n                                [--sort ORDER] [--hist HIST] [--format FORMAT]\r\n                                [-h|--help]\r\n\r\n    Options:\r\n        -h --help                   show this\r\n        -i, --infile BLOBDB         BlobDB file\r\n        -c, --cov COV               COV file used for y-axis\r\n\r\n        --xlabel XLABEL             Label for x-axis [default: BlobDB_cov]\r\n        --ylabel YLABEL             Label for y-axis [default: CovFile_cov]\r\n        --log                       Plot log-scale axes\r\n        --xmax FLOAT                Maximum values for x-axis [default: 1e10]\r\n        --ymax FLOAT                Maximum values for y-axis [default: 1e10]\r\n\r\n        -p, --plotgroups INT        Number of (taxonomic) groups to plot, remaining\r\n                                     groups are placed in 'other' [default: 7]\r\n        -r, --rank RANK             Taxonomic rank used for colouring of blobs [default: phylum]\r\n        -x, --taxrule TAXRULE       Taxrule which has been used for computing taxonomy\r\n                                     (Supported: bestsum, bestsumorder) [default: bestsum]\r\n        --sort <ORDER>              Sort order for plotting [default: span]\r\n                                     span  : plot with decreasing span\r\n                                     count : plot with decreasing count\r\n        --hist <HIST>               Data for histograms [default: span]\r\n                                     span  : span-weighted histograms\r\n                                     count : count histograms\r\n\r\n        --title                     Add title of BlobDB to plot [default: False]\r\n        -l, --length INT            Minimum sequence length considered for plotting [default: 100]\r\n        -n, --nohit                 Hide sequences without taxonomic annotation [default: False]\r\n        -s, --noscale               Do not scale sequences by length [default: False]\r\n        -o, --out PREFIX            Output prefix\r\n        -m, --multiplot             Multi-plot. Print plot after addition of each (taxonomic) group\r\n                                     [default: False]\r\n        --format FORMAT             Figure format for plot (png, pdf, eps, jpeg,\r\n                                        ps, svg, svgz, tiff) [default: png]\r\n```\r\n## Tips & Tricks\r\n- Recommended BLASTn search against NCBI nt\r\n```\r\nblastn \\\r\n-task megablast \\\r\n-query assmebly.fna \\\r\n-db nt \\\r\n-outfmt '6 qseqid staxids bitscore std sscinames sskingdoms stitle' \\\r\n-culling_limit 5 \\\r\n-num_threads 62 \\\r\n-evalue 1e-25 \\\r\n-out assembly.vs.nt.cul5.1e25.megablast.out\r\n```\r\n- Converting [Diamond](https://github.com/bbuchfink/diamond/) blastx output for use in 'blobtools create' : [daa_to_tagc.pl](https://github.com/GDKO/CGP-scripts/blob/master/scripts/daa_to_tagc.pl)\r\n\r\n- Filtering Reads (requires [samtools](http://www.htslib.org/))\r\n```\r\n# 1) Generate index of contigs\r\nsamtools faidx ASSEMBLY.fna\r\n\r\n# 2) Subset index using list of contigs of interest (list.txt)\r\ngrep -w -f list.txt ASSEMBLY. fai > list.fai\r\n\r\n# 3) Filter unmapped reads\r\nsamtools view -bS -f12 FILE.bam > FILE.u_u.bam\r\nsamtools bam2fq FILE.u_u.bam | gzip > FILE.u_u.ilv.fq.gz\r\n\r\n# 4A) Filter pairs where both reads map to list of contigs\r\nsamtools view -t list.fai -bS -F12 FILE.bam > FILE.m_m.bam\r\nsamtools bam2fq FILE.m_m.bam | gzip > FILE.m_m.ilv.fq.gz\r\n\r\n# 4B) Filter pairs where both reads map\r\nsamtools view -bS -F12 FILE.bam > FILE.m_m.bam\r\nsamtools bam2fq FILE.m_m.bam | gzip > FILE.m_m.ilv.fq.gz\r\n\r\n# 5) Filter pairs where one read of a pair maps (use -t list.fai if necessary)\r\nsamtools view -bS -f8 -F4 FILE.bam > FILE.m_u.bam\r\nsamtools view -bS -f4 -F8 FILE.bam > FILE.u_m.bam\r\nsamtools merge -n FILE.one_mapped.bam FILE.m_u.bam FILE.u_m.bam\r\nsamtools sort -n -T FILE.temp -O bam FILE.one_mapped.bam > FILE.one_mapped.bam.sorted;\r\nmv FILE.one_mapped.bam.sorted FILE.one_mapped.bam\r\nsamtools bam2fq FILE.one_mapped.bam | gzip > FILE.one_mapped.ilv.fq.gz\r\n```",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}